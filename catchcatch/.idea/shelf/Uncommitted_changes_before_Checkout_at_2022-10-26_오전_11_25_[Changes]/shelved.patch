Index: source/JS/GAME/game.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Fairy from './GameObj/fairy.js';\r\nimport Magic from './GameObj/magic.js';\r\nimport Player from './GameObj/player.js';\r\nimport Enemy from './GameObj/enemy.js';\r\n\r\nexport const config = {\r\n    type: Phaser.AUTO,\r\n    width: 600,\r\n    height: 600,\r\n    parent: \"game-container\",\r\n    pixelArt: true,\r\n    scene: {\r\n        //scene 제어에\r\n        preload: preload,\r\n        create: create,\r\n        update: update,\r\n    },\r\n    physics: {\r\n        default: \"arcade\",\r\n        arcade: {\r\n            debug: false,\r\n            fixedStep: false,\r\n        },\r\n    },\r\n};\r\n\r\n//player start\r\n// 고양이 json\r\nlet cats;\r\n// 플레이어 객체\r\nlet player;\r\n// 캐릭터 선택 시 변경될 변수\r\nlet catNumber = 0;\r\n// 요정\r\nvar nowFairy = 0;\r\nvar fairySet = [, , , , ,];\r\nvar fairy;\r\nglobal.thisScene = \"\";\r\n// 공격 및 공격 딜레이 관련\r\nglobal.control = false;\r\nglobal.normalAttackTimer = 0;\r\nvar normalAttackAS = 20;\r\nvar magic;\r\nglobal.magics = \"\";\r\nexport var cursors;\r\nvar gameOver = false;\r\nvar scoreText;\r\n// 마우스 포인터 관련\r\nexport var input;\r\nvar mouse;\r\n//player end\r\n\r\n//map start\r\nvar map;\r\nexport var mapSize = 16000;\r\nexport var camera;\r\nvar backgroundLayer;\r\nvar portalLayer;\r\nvar wallLayer;\r\nvar stage1Layer;\r\nvar stage2Layer;\r\nvar stage3Layer;\r\nvar stage4Layer;\r\nlet controls;\r\n//map end\r\n\r\n//enemy start\r\n\r\n// 몬스터 변수 선언\r\nexport var alienSet;\r\nvar alien;\r\nvar target;\r\nvar cursors;\r\nvar mon1Delay = 0;\r\nvar mon1X;\r\nvar mon1Y;\r\nglobal.alienCount = 0;\r\nvar randomLocation;\r\nvar invincible = false;\r\nvar timer;\r\n\r\n// 몬스터 이미지\r\n\r\n//enemy end\r\n\r\nfunction preload() {\r\n    //map start\r\n    this.load.image(\"tiles\", \"images/map/tiles.png\");\r\n    this.load.image(\"tiles2\", \"images/map/tiles2.png\");\r\n    this.load.tilemapTiledJSON(\"map\", \"images/map/resources.tmj\");\r\n    this.load.image(\"j1\", \"images/mine/j1.png\");\r\n    this.load.image(\"j2\", \"images/mine/j2.png\");\r\n    this.load.image(\"j3\", \"images/mine/j3.png\");\r\n    //map end\r\n\r\n    //player start\r\n    // 플레이어 스프라이트\r\n    this.load.spritesheet(\"cat1\", \"images/cat/cat1.png\", {\r\n        frameWidth: 96,\r\n        frameHeight: 100,\r\n    });\r\n\r\n  // 공격 스프라이트\r\n  this.load.spritesheet(\r\n    \"magic1\",\r\n    \"images/attack/weapon/16_sunburn_spritesheet.png\",\r\n    {\r\n      frameWidth: 100,\r\n      frameHeight: 100,\r\n      endFrame: 61,\r\n    }\r\n  );\r\n  this.load.spritesheet(\r\n    \"magic2\",\r\n    \"images/attack/weapon/7_firespin_spritesheet.png\",\r\n    {\r\n      frameWidth: 100,\r\n      frameHeight: 100,\r\n    }\r\n  );\r\n  this.load.spritesheet(\r\n    \"magic3\",\r\n    \"images/attack/weapon/18_midnight_spritesheet.png\",\r\n    {\r\n      frameWidth: 100,\r\n      frameHeight: 100,\r\n      endFrame: 61,\r\n    }\r\n  );\r\n  this.load.spritesheet(\r\n    \"magic4\",\r\n    \"images/attack/weapon/2_magic8_spritesheet.png\",\r\n    {\r\n      frameWidth: 100,\r\n      frameHeight: 100,\r\n      endFrame: 61,\r\n    }\r\n  );\r\n  this.load.spritesheet(\r\n    \"magic5\",\r\n    \"images/attack/weapon/8_protectioncircle_spritesheet.png\",\r\n    { frameWidth: 100, frameHeight: 100, endFrame: 61 }\r\n  );\r\n  this.load.spritesheet(\r\n    \"magic5_1\",\r\n    \"images/attack/weapon/13_vortex_spritesheet.png\",\r\n    { frameWidth: 100, frameHeight: 100, endFrame: 61 }\r\n  );\r\n  // 요정 스프라이트\r\n  this.load.spritesheet(\"fairy1\", \"images/fairy/fairy1.png\", {\r\n    frameWidth: 150,\r\n    frameHeight: 142,\r\n  });\r\n  this.load.spritesheet(\"fairy2\", \"images/fairy/fairy2.png\", {\r\n    frameWidth: 230,\r\n    frameHeight: 210,\r\n  });\r\n  this.load.spritesheet(\"fairy3\", \"images/fairy/fairy3.png\", {\r\n    frameWidth: 134,\r\n    frameHeight: 158,\r\n  });\r\n  this.load.spritesheet(\"fairy4\", \"images/fairy/fairy4.png\", {\r\n    frameWidth: 136,\r\n    frameHeight: 170,\r\n  });\r\n  this.load.spritesheet(\"fairy5\", \"images/fairy/fairy5.png\", {\r\n    frameWidth: 160,\r\n    frameHeight: 190,\r\n  });\r\n  //player end\r\n\r\n    //enemy start\r\n    this.load.spritesheet(\r\n        \"alien\",\r\n        \"http://labs.phaser.io/assets/tests/invaders/invader1.png\",\r\n        {frameWidth: 32, frameHeight: 32}\r\n    );\r\n    //enemy end\r\n}\r\n\r\nfunction create() {\r\n  thisScene = this;\r\n  //map start\r\n  this.cameras.main.setBounds(0, 0, mapSize, mapSize);\r\n  this.physics.world.setBounds(0, 0, mapSize, mapSize);\r\n  map = this.make.tilemap({ key: \"map\" }); //map을 키로 가지는 JSON 파일 가져와 적용하기\r\n  const tileset = map.addTilesetImage(\"Tiles\", \"tiles\"); //그릴떄 사용할 타일 이미지 적용하기\r\n  const tileset2 = map.addTilesetImage(\"tiles2\", \"tiles2\"); //그릴떄 사용할 타일 이미지 적용하기\r\n  backgroundLayer = map.createDynamicLayer(\"background\", tileset); //레이어 화면에 뿌려주기\r\n  portalLayer = map.createDynamicLayer(\"portal\", tileset2); //레이어 화면에 뿌려주기\r\n  wallLayer = map.createDynamicLayer(\"wall\", tileset2);\r\n  stage1Layer = map.createDynamicLayer(\"stage1\", tileset2);\r\n  stage2Layer = map.createDynamicLayer(\"stage2\", tileset);\r\n  stage3Layer = map.createDynamicLayer(\"stage3\", tileset2);\r\n  stage4Layer = map.createDynamicLayer(\"stage4\", tileset2);\r\n\r\n    stage3Layer.setCollisionByProperty({collides: true});\r\n    // const debugGraphics = this.add.graphics().setAlpha(0.7);\r\n    // stage3Layer.renderDebug(debugGraphics, {\r\n    //   tileColor: null,\r\n    // })\r\n\r\n  cursors = this.input.keyboard.addKeys({\r\n    up: Phaser.Input.Keyboard.KeyCodes.W,\r\n    down: Phaser.Input.Keyboard.KeyCodes.S,\r\n    left: Phaser.Input.Keyboard.KeyCodes.A,\r\n    right: Phaser.Input.Keyboard.KeyCodes.D,\r\n    slot1: Phaser.Input.Keyboard.KeyCodes.ONE,\r\n    slot2: Phaser.Input.Keyboard.KeyCodes.TWO,\r\n    slot3: Phaser.Input.Keyboard.KeyCodes.THREE,\r\n    slot4: Phaser.Input.Keyboard.KeyCodes.FOUR,\r\n    slot5: Phaser.Input.Keyboard.KeyCodes.FIVE,\r\n    skill: Phaser.Input.Keyboard.KeyCodes.SPACE\r\n  });\r\n  // camera.setBounds(0, 0, map.widthInPixels, map.heightInPixels, true);\r\n\r\n    //map end\r\n\r\n    //player start\r\n    cats = require('./jsons/cats.json');\r\n    fairySet = require('./jsons/fairys.json');\r\n    console.log(cats);\r\n    player = cats[catNumber];\r\n    player = new Player(this, 1, 100, 100);\r\n    console.log(player);\r\n    console.log(player)\r\n    camera = this.cameras.main;\r\n    input = this.input;\r\n    mouse = input.mousePointer;\r\n    this.input.on(\r\n        \"pointermove\",\r\n        function (pointer) {\r\n            let cursor = pointer;\r\n            let angle = Phaser.Math.Angle.Between(\r\n                player.x,\r\n                player.y,\r\n                cursor.x + this.cameras.main.scrollX,\r\n                cursor.y + this.cameras.main.scrollY\r\n            );\r\n        },\r\n        this\r\n    );\r\n\r\n  // 플레이어, 요정 로딩\r\n  fairySet[0] = new Fairy(this, 100, 4, 1, 1, 60, 10, 500, 1, player);\r\n  fairySet[0].initFairy1(2, 2);\r\n  fairySet[1] = new Fairy(this,100, 10, 1, 1, 70, 10, 160, 2, player);\r\n  fairySet[2] = new Fairy(this,100, 0, 1, 3, 80, 10, 300, 3, player);\r\n  fairySet[3] = new Fairy(this,100, 10, 1, 4, 90, 10, 400, 4, player);\r\n  fairySet[4] = new Fairy(this, 100, 10, 1, 5, 100, 10, 500, 5, player);\r\n  player.changeFairy(fairySet[0]);\r\n  normalAttackAS = fairySet[0].as;\r\n  // animation\r\n  this.anims.create({\r\n    key: \"fairy1_idle\",\r\n    frames: this.anims.generateFrameNumbers(\"fairy1\", { start: 12, end: 21 }),\r\n    frameRate: 8,\r\n    repeat: -1,\r\n  });\r\n\r\n    this.anims.create({\r\n        key: \"fairy1_attack\",\r\n        frames: this.anims.generateFrameNumbers(\"fairy1\", {start: 6, end: 10}),\r\n        frameRate: 12,\r\n        repeat: 0,\r\n    });\r\n\r\n    this.anims.create({\r\n        key: \"fairy2_idle\",\r\n        frames: this.anims.generateFrameNumbers(\"fairy2\", {start: 10, end: 19}),\r\n        frameRate: 8,\r\n        repeat: -1,\r\n    });\r\n\r\n    this.anims.create({\r\n        key: \"fairy2_attack\",\r\n        frames: this.anims.generateFrameNumbers(\"fairy2\", {start: 0, end: 8}),\r\n        frameRate: 14,\r\n        repeat: 0,\r\n    });\r\n\r\n    this.anims.create({\r\n        key: \"fairy3_idle\",\r\n        frames: this.anims.generateFrameNumbers(\"fairy3\", {start: 11, end: 19}),\r\n        frameRate: 8,\r\n        repeat: -1,\r\n    });\r\n\r\n    this.anims.create({\r\n        key: \"fairy3_attack\",\r\n        frames: this.anims.generateFrameNumbers(\"fairy3\", {start: 0, end: 9}),\r\n        frameRate: 14,\r\n        repeat: 0,\r\n    });\r\n\r\n    this.anims.create({\r\n        key: \"fairy4_idle\",\r\n        frames: this.anims.generateFrameNumbers(\"fairy4\", {start: 7, end: 14}),\r\n        frameRate: 8,\r\n        repeat: -1,\r\n    });\r\n\r\n    this.anims.create({\r\n        key: \"fairy4_attack\",\r\n        frames: this.anims.generateFrameNumbers(\"fairy4\", {start: 0, end: 5}),\r\n        frameRate: 10,\r\n        repeat: 0,\r\n    });\r\n\r\n    this.anims.create({\r\n        key: \"fairy5_idle\",\r\n        frames: this.anims.generateFrameNumbers(\"fairy5\", {start: 15, end: 24}),\r\n        frameRate: 8,\r\n        repeat: -1,\r\n    });\r\n\r\n    this.anims.create({\r\n        key: \"fairy5_attack\",\r\n        frames: this.anims.generateFrameNumbers(\"fairy5\", {start: 0, end: 13}),\r\n        frameRate: 17,\r\n        repeat: 0,\r\n    });\r\n\r\n    this.anims.create({\r\n        key: \"turn\",\r\n        frames: this.anims.generateFrameNumbers(\"cat1\", {start: 0, end: 0}),\r\n        frameRate: 10,\r\n    });\r\n    this.anims.create({\r\n        key: \"left\",\r\n        frames: this.anims.generateFrameNumbers(\"cat1\", {start: 1, end: 7}),\r\n        frameRate: 10,\r\n        repeat: -1,\r\n    });\r\n    this.anims.create({\r\n        key: \"right\",\r\n        frames: this.anims.generateFrameNumbers(\"cat1\", {start: 1, end: 7}),\r\n        frameRate: 10,\r\n        repeat: -1,\r\n    });\r\n\r\n\r\n  // 공격 애니메이션\r\n  this.anims.create({\r\n    key: \"magic1\",\r\n    frames: this.anims.generateFrameNumbers(\"magic1\", {\r\n      start: 0,\r\n      end: 60,\r\n      first: 0,\r\n    }),\r\n    frameRate: 200,\r\n    repeat: -1,\r\n  });\r\n  this.anims.create({\r\n    key: \"magic2\",\r\n    frames: this.anims.generateFrameNumbers(\"magic2\", {\r\n      start: 0,\r\n      end: 60,\r\n      first: 0,\r\n    }),\r\n    frameRate: 200,\r\n    repeat: -1,\r\n  });\r\n  this.anims.create({\r\n    key: \"magic3\",\r\n    frames: this.anims.generateFrameNumbers(\"magic3\", {\r\n      start: 0,\r\n      end: 60,\r\n      first: 0,\r\n    }),\r\n    frameRate: 200,\r\n    repeat: -1,\r\n  });\r\n  this.anims.create({\r\n    key: \"magic4\",\r\n    frames: this.anims.generateFrameNumbers(\"magic4\", {\r\n      start: 0,\r\n      end: 60,\r\n      first: 0,\r\n    }),\r\n    frameRate: 200,\r\n    repeat: -1,\r\n  });\r\n  this.anims.create({\r\n    key: \"magic5\",\r\n    frames: this.anims.generateFrameNumbers(\"magic5\", {\r\n      start: 0,\r\n      end: 60,\r\n      first: 0,\r\n    }),\r\n    frameRate: 200,\r\n    repeat: -1,\r\n  });\r\n  this.anims.create({\r\n    key: \"magic5_1\",\r\n    frames: this.anims.generateFrameNumbers(\"magic5_1\", {\r\n      start: 0,\r\n      end: 60,\r\n      first: 0,\r\n    }),\r\n    frameRate: 200,\r\n    repeat: -1,\r\n  });\r\n  fairySet[nowFairy].play(\"fairy\" + (nowFairy + 1) + \"_idle\", true);\r\n\r\n    //player end\r\n\r\n    //map start\r\n    let j1;\r\n\r\n    for (let i = 0; i < 5; i++) {\r\n        let x = Phaser.Math.Between(400, 600);\r\n        let y = Phaser.Math.Between(400, 600);\r\n\r\n        j1 = this.physics.add.sprite(x, y, \"j1\");\r\n        j1.body.immovable = true;\r\n\r\n        this.physics.add.collider(player, j1);\r\n    }\r\n\r\n    console.log(j1);\r\n\r\n    // this.physics.add.overlap(player, portalLayer);\r\n\r\n    player.setPosition(8000, 8000); //width, height\r\n    this.physics.add.collider(player, stage3Layer);\r\n    camera.startFollow(player, false);\r\n    //map end\r\n\r\n    //enemy start\r\n\r\n  alienSet = this.physics.add.group();\r\n  magics = this.physics.add.group();\r\n  // 만약 유저와 몬스터가 닿았다면 (hitplayer 함수 실행)\r\n  this.physics.add.collider(player, alienSet, player.hitPlayer);\r\n  thisScene.physics.add.overlap(magics, alienSet, attack);\r\n    this.anims.create({\r\n        key: 'swarm',\r\n        frames: this.anims.generateFrameNumbers('alien', {start: 0, end: 1}),\r\n        frameRate: 2,\r\n        repeat: -1\r\n    })\r\n\r\n    // 공격 맞은 후 일시 무적에 사용\r\n    timer = this.time.addEvent({\r\n        delay: 2000, callback: () => {\r\n            player.invincible = false\r\n        }, loop: true\r\n    });\r\n\r\n    //enemy end\r\n}\r\n\r\nfunction update(time, delta) {\r\n    //player start\r\n    changeSlot();\r\n\r\n  if (normalAttackTimer > normalAttackAS) {\r\n    control = false;\r\n  } else {\r\n    normalAttackTimer++;\r\n  }\r\n    //mouse clicked\r\n  if (mouse.leftButtonDown() && !control) {\r\n    magic = new Magic(this, fairySet[nowFairy]);\r\n    this.physics.add.overlap(magic, alienSet, fairySet[nowFairy].attack, null, this);\r\n    fairySet[nowFairy].normalAttack(magic);\r\n  }\r\n\r\n  player.move();\r\n  //player end\r\n\r\n    //map start\r\n\r\n    // let tile = map.getTileAt(map.worldToTileX(player.x), map.worldToTileY(player.y));\r\n\r\n    // if (tile) {\r\n    //   console.log('' + JSON.stringify(tile.properties))\r\n    // }\r\n\r\n    //map end\r\n\r\n    //enemy start\r\n\r\n    if (alienCount !== 0) {\r\n        for (let i = 0; i < alienSet.children.entries.length; i++) {\r\n            // console.log(this.physics.moveToObject(monsters[i], player, 100))\r\n            // if ()\r\n            this.physics.moveToObject(alienSet.children.entries[i], player, alienSet.children.entries[i].velo);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    mon1Delay++;\r\n\r\n\r\n// 랜덤 위치에 몬스터 생성 (추후 player.x 및 y 좌표 기준 생성으로 변경)\r\n    if (mon1Delay > 60) {\r\n        randomLocation = Math.floor(Math.random() * 4) + 1\r\n        if (randomLocation === 1) {\r\n            mon1X = Phaser.Math.Between(player.x - 2000, player.x + 2000);\r\n            mon1Y = Phaser.Math.Between(player.y + 2000, player.y + 2010);\r\n        }\r\n\r\n        if (randomLocation === 2) {\r\n            mon1X = Phaser.Math.Between(player.x - 2000, player.x + 2000);\r\n            mon1Y = Phaser.Math.Between(player.y - 2000, player.y - 2010);\r\n        }\r\n\r\n        if (randomLocation === 3) {\r\n            mon1X = Phaser.Math.Between(player.x - 2000, player.x - 2000);\r\n            mon1Y = Phaser.Math.Between(player.y - 2000, player.y + 2000);\r\n        }\r\n\r\n        if (randomLocation === 4) {\r\n            mon1X = Phaser.Math.Between(player.x + 2000, player.x + 2000);\r\n            mon1Y = Phaser.Math.Between(player.y - 2000, player.y + 2000);\r\n        }\r\n\r\n\r\n        alien = new Enemy(this, 10, 100, mon1X, mon1Y, 'alien', 'swarm');\r\n        alienCount += 1;\r\n        mon1Delay = 0;\r\n        alienSet.add(alien);\r\n        this.physics.add.collider(alienSet, alien);\r\n        alien.anime(alien);\r\n    }\r\n  for(let i = magics.length-1; i>=0;i--){\r\n    magics[i].timer++;\r\n    if(magics[i].timer == magics[i].lifetime){\r\n      magics[i].destroy();\r\n      magics.splice(i,1);\r\n    }\r\n  }\r\n\r\n    //enemy end\r\n\r\n}\r\n\r\n//player start\r\n\r\n// 플레이어 공격\r\nvar magicFire = function (game) {\r\n  // 게임에서 외부 UI 연관 테스트\r\n  //for fire again\r\n  magic = new Magic(game, fairySet[nowFairy].range, fairySet[nowFairy]);\r\n  magics.push(magic);\r\n  // console.log(magic);\r\n  // console.log(magic.body);\r\n  game.physics.add.overlap(magic, alienSet, attack, null, this);\r\n  // magic.body.setCircle(45);\r\n\r\n  /*충돌관련 하드코딩 된 부분 나중에 수정 */\r\n  magic.body.width = 50;\r\n  magic.body.height = 50;\r\n  magic.body.offset.x = 25;\r\n  magic.body.offset.y = 25;\r\n  normalAttackTimer = 0;\r\n\r\n\r\n    let angle = Phaser.Math.Angle.Between(\r\n        fairySet[nowFairy].x,\r\n        fairySet[nowFairy].y,\r\n        input.x + camera.scrollX,\r\n        input.y + camera.scrollY\r\n    );\r\n\r\n    // 각도 계산 공식\r\n    angle = ((angle + Math.PI / 2) * 180) / Math.PI + 90;\r\n    magic.rotation += (angle - 180) / 60 - 1.5;\r\n    magic.anims.play(\"magic\" + (nowFairy + 1), true);\r\n\r\n    //move to mouse position\r\n    game.physics.moveTo(\r\n        magic,\r\n        input.x + camera.scrollX,\r\n        input.y + camera.scrollY,\r\n        fairySet[nowFairy].velo\r\n    );\r\n    control = true;\r\n};\r\n\r\nfunction changeSlot() {\r\n    if (\r\n        cursors.slot1.isDown &&\r\n        nowFairy !== 0 &&\r\n        /idle/.test(fairySet[nowFairy].anims.currentAnim.key)\r\n    ) {\r\n        fairySet[nowFairy].x = -100;\r\n        fairySet[nowFairy].y = -100;\r\n        nowFairy = 0;\r\n        player.changeFairy(fairySet[nowFairy]);\r\n        normalAttackAS = fairySet[nowFairy].as;\r\n        fairySet[nowFairy].anims.play(\"fairy\" + (nowFairy + 1) + \"_idle\", true);\r\n    }\r\n\r\n    if (\r\n        cursors.slot2.isDown &&\r\n        nowFairy !== 1 &&\r\n        /idle/.test(fairySet[nowFairy].anims.currentAnim.key)\r\n    ) {\r\n        fairySet[nowFairy].x = -100;\r\n        fairySet[nowFairy].y = -100;\r\n        nowFairy = 1;\r\n        player.changeFairy(fairySet[nowFairy]);\r\n        normalAttackAS = fairySet[nowFairy].as;\r\n        fairySet[nowFairy].anims.play(\"fairy\" + (nowFairy + 1) + \"_idle\", true);\r\n    }\r\n\r\n    if (\r\n        cursors.slot3.isDown &&\r\n        nowFairy !== 2 &&\r\n        /idle/.test(fairySet[nowFairy].anims.currentAnim.key)\r\n    ) {\r\n        fairySet[nowFairy].x = -100;\r\n        fairySet[nowFairy].y = -100;\r\n        nowFairy = 2;\r\n        player.changeFairy(fairySet[nowFairy]);\r\n        normalAttackAS = fairySet[nowFairy].as;\r\n        fairySet[nowFairy].anims.play(\"fairy\" + (nowFairy + 1) + \"_idle\", true);\r\n    }\r\n\r\n    if (\r\n        cursors.slot4.isDown &&\r\n        nowFairy !== 3 &&\r\n        /idle/.test(fairySet[nowFairy].anims.currentAnim.key)\r\n    ) {\r\n        fairySet[nowFairy].x = -100;\r\n        fairySet[nowFairy].y = -100;\r\n        nowFairy = 3;\r\n        player.changeFairy(fairySet[nowFairy]);\r\n        normalAttackAS = fairySet[nowFairy].as;\r\n        fairySet[nowFairy].anims.play(\"fairy\" + (nowFairy + 1) + \"_idle\", true);\r\n    }\r\n\r\n    if (\r\n        cursors.slot5.isDown &&\r\n        nowFairy !== 4 &&\r\n        /idle/.test(fairySet[nowFairy].anims.currentAnim.key)\r\n    ) {\r\n        fairySet[nowFairy].x = -100;\r\n        fairySet[nowFairy].y = -100;\r\n        nowFairy = 4;\r\n        player.changeFairy(fairySet[nowFairy]);\r\n        normalAttackAS = fairySet[nowFairy].as;\r\n        fairySet[nowFairy].anims.play(\"fairy\" + (nowFairy + 1) + \"_idle\", true);\r\n    }\r\n\r\n    if (!fairySet[nowFairy].anims.isPlaying) {\r\n        fairySet[nowFairy].anims.play(\"fairy\" + (nowFairy + 1) + \"_idle\", true);\r\n    }\r\n}\r\n\r\nfunction attack(magic, alien) {\r\n  if (!alien.invincible) {\r\n    if (magic.pierceCount > 0) {\r\n      magic.pierceCount--;\r\n    } else {\r\n      magic.destroy();\r\n    }\r\n\r\n    if (nowFairy === 2) { //  && fairys[nowFairy].level === 9 (추후에 레벨업 생길 때 추가)\r\n      let num = Math.floor(Math.random() * 100);\r\n      if (num <= 9) {\r\n        alien.destroy();\r\n      }\r\n    }\r\n\r\n    alien.health -= fairySet[nowFairy].dmg;\r\n    alien.invincible = true;\r\n    if (alien.health <= 0){\r\n      alien.destroy();\r\n      alienCount -= 1;\r\n    }\r\n  }\r\n}\r\n//enemy end\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/source/JS/GAME/game.js b/source/JS/GAME/game.js
--- a/source/JS/GAME/game.js	(revision ec57821ea140af7bb5f24a8e38af72ebf2af8640)
+++ b/source/JS/GAME/game.js	(date 1666751035994)
@@ -50,6 +50,9 @@
 var mouse;
 //player end
 
+//gametimer
+var gameTimer = 0;
+
 //map start
 var map;
 export var mapSize = 16000;
@@ -497,6 +500,8 @@
 
 // 랜덤 위치에 몬스터 생성 (추후 player.x 및 y 좌표 기준 생성으로 변경)
     if (mon1Delay > 60) {
+        gameTimer++;
+        console.log(gameTimer);
         randomLocation = Math.floor(Math.random() * 4) + 1
         if (randomLocation === 1) {
             mon1X = Phaser.Math.Between(player.x - 2000, player.x + 2000);
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
deleted file mode 100644
--- a/.idea/workspace.xml	(revision ec57821ea140af7bb5f24a8e38af72ebf2af8640)
+++ /dev/null	(revision ec57821ea140af7bb5f24a8e38af72ebf2af8640)
@@ -1,14 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ChangeListManager">
-    <list default="true" id="7a88bfc0-0d5f-45b6-a61b-9db2fbd80d33" name="Changes" comment="" />
-    <option name="SHOW_DIALOG" value="false" />
-    <option name="HIGHLIGHT_CONFLICTS" value="true" />
-    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
-    <option name="LAST_RESOLUTION" value="IGNORE" />
-  </component>
-  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
-  <component name="TaskManager">
-    <servers />
-  </component>
-</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
deleted file mode 100644
--- a/.idea/misc.xml	(revision ec57821ea140af7bb5f24a8e38af72ebf2af8640)
+++ /dev/null	(revision ec57821ea140af7bb5f24a8e38af72ebf2af8640)
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectRootManager">
-    <output url="file://$PROJECT_DIR$/out" />
-  </component>
-</project>
\ No newline at end of file
